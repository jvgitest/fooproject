<?php
/**
 * @file
 * This file is used for all the hook_update_n() that will deploy the site.
 */

/**
 * Implements hook_install().
 */
function site_deploy_install() {
  // Provide friendly message to get started with permissions and configuration.
  $t = get_t();
  drupal_set_message($t('The site_deploy module has been successfully installed.  It has no configuration, just use its site_deploy.install to manage the site\'s deployments.', array()));
  $messages = array();
  $messages[] = $t("Running existing hook_update_N's for site_deploy.");
  // This is for initially standing up the production site which may come long
  // after the development site has been up and running.  Upon install it will
  // run through all the currently existing hook_update_N.
  // See http://dcycleproject.org/node/43
  for ($i = 7000; $i < 8000; $i++) {
    $existing_update_n = 'site_deploy_update_' . $i;
    $sandbox = array();
    if (function_exists($existing_update_n)) {
      $messages[$existing_update_n] = $existing_update_n($sandbox);
      $highest_run = $i;
    }
  }
  HookUpdateDeployTools\Message::make('Site_deploy_update_N from 7000 to !max have been run.', array('!max' => $highest_run), WATCHDOG_INFO);
  HookUpdateDeployTools\Message::varDumpToDrush($messages);
}

/**
 * Implements hook_disable().
 */
function site_deploy_disable() {
  $t = get_t();
  drupal_set_message($t('site_deploy has been disabled. No data or settings were altered.'));
}

/**
 * Implements hook_uninstall().
 */
function site_deploy_uninstall() {
  $t = get_t();
  drupal_set_message($t('site_deploy has been uninstalled. No data or settings were altered.'));
}

/*
 * Below here go all the hook_update_N() that will manage the deployment of
 * this site.
 * ///////////////////////////////////////////////////////////////////////////
 */

/**
 * Whatever it placed in this docblock gets displayed upon drush updb.
 */
function site_deploy_update_7000(&$sandbox) {
  // Whatever code is placed here gets run once upon 'drush updb' or update.php.
  return HookUpdateDeployTools\Message::make("Whatever is returned is displayed after this update runs.");
}

 /**
 * Remove blocks from regions blocks
 */
function site_deploy_update_7401() {
$theme='sky';
 $result = db_query("SELECT * FROM {block} WHERE theme = '%s'", $theme);
  $blocks = array();
  while ($bloc = $result->fetchAssoc()) {
    $blocks[$bloc['module']][$bloc['delta']] = $bloc;
  }
  HookUpdateDeployTools\Message::varDumpToDrush($blocks);
  
  // Remove blocks that are no longer defined by the code from the database.
  foreach ($blocks as $module => $module_block) {
    // This cleanup does not apply to disabled modules, to avoid configuration
    // being lost when modules are disabled.
    if (module_exists($module)) {
      foreach ($module_block as $delta => $block) {
         $sql=sprintf("UPDATE FROM {block} status = '%s',region = '%s' WHERE module = '%s' AND delta = '%s' AND theme = '%s'", 0, 'BLOCK_REGION_NONE', $module, $delta, $theme);
         HookUpdateDeployTools\Message::make($sql);
         //db_query($sql);
      }
    }
  }
  
  return HookUpdateDeployTools\Message::make("Whatever is returned is displayed after this update runs.");
}

/**
 * Whatever it placed in this docblock gets displayed upon drush updb.
 */
function site_deploy_update_7402(&$sandbox) {
  $message = array();
  
  //modules
  $module_list = array(
    'comment',
  );
   $message[] = HookUpdateDeployTools\Modules::disable($module_list);
  
  $module_list = array(
    'devel_generate',
    'strongarm',
    'features_extra',
    'realistic_dummy_content',    
    'uuid_features',
    'menu_import',
  );
  $message[] = HookUpdateDeployTools\Modules::enable($module_list);
  
  //themes
  $theme_list = array(
    0 => 'adaptivetheme',
    1 => 'adaptivetheme_admin',
    'theme_default' => 'sky',
    //'zen'
  );
  theme_enable($theme_list);

	//Set default theme
  foreach ($theme_list as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
    }
  }

  // Disable the default Bartik theme
  theme_disable(array('bartik'));
  
  
  //features
  $module_list = array(
    'fa_blocks_content',
    'fa_content_types',
    'fa_menus',
    'fa_theme_sky',
  );
  $message[] = HookUpdateDeployTools\Modules::enable($module_list);
  return $message;
  return implode('\n', $message);
}