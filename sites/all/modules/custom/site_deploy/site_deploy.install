<?php
/**
 * @file
 * This file is used for all the hook_update_n() that will deploy the site.
 */

/**
 * Implements hook_install().
 */
function site_deploy_install() {
  // Provide friendly message to get started with permissions and configuration.
  $t = get_t();
  drupal_set_message($t('The site_deploy module has been successfully installed.  It has no configuration, just use its site_deploy.install to manage the site\'s deployments.', array()));
  $messages = array();
  $messages[] = $t("Running existing hook_update_N's for site_deploy.");
  // This is for initially standing up the production site which may come long
  // after the development site has been up and running.  Upon install it will
  // run through all the currently existing hook_update_N.
  // See http://dcycleproject.org/node/43
  for ($i = 7000; $i < 8000; $i++) {
    $existing_update_n = 'site_deploy_update_' . $i;
    $sandbox = array();
    if (function_exists($existing_update_n)) {
      $messages[$existing_update_n] = $existing_update_n($sandbox);
      $highest_run = $i;
    }
  }
  HookUpdateDeployTools\Message::make('Site_deploy_update_N from 7000 to !max have been run.', array('!max' => $highest_run), WATCHDOG_INFO);
  HookUpdateDeployTools\Message::varDumpToDrush($messages);
}

/**
 * Implements hook_disable().
 */
function site_deploy_disable() {
  $t = get_t();
  drupal_set_message($t('site_deploy has been disabled. No data or settings were altered.'));
}

/**
 * Implements hook_uninstall().
 */
function site_deploy_uninstall() {
  $t = get_t();
  drupal_set_message($t('site_deploy has been uninstalled. No data or settings were altered.'));
}

/*
 * Below here go all the hook_update_N() that will manage the deployment of
 * this site.
 * ///////////////////////////////////////////////////////////////////////////
 */

/**
 * Whatever it placed in this docblock gets displayed upon drush updb.
 */
function site_deploy_update_7000(&$sandbox) {
  // Whatever code is placed here gets run once upon 'drush updb' or update.php.
  return HookUpdateDeployTools\Message::make("Whatever is returned is displayed after this update runs.");
}

/**
 * Whatever it placed in this docblock gets displayed upon drush updb.
 */
function site_deploy_update_7402(&$sandbox) {
  $messages = array();
  
  //clean database
  db_query("DELETE FROM {system} WHERE name LIKE '%ctool%'");
  db_query("DROP TABLE IF EXISTS {ctools_css_cache}");
  db_query("DROP TABLE IF EXISTS {ctools_custom_content}");
  db_query("DROP TABLE IF EXISTS {ctools_object_cache}");
  db_query("DROP TABLE IF EXISTS {cache_features}");
  db_query("DROP TABLE IF EXISTS {fe_block_boxes}");
  db_query("TRUNCATE TABLE {cache}"); //empty table not remove
  
  //modules
  $module_list = array(
    'comment',
  );
   $message = HookUpdateDeployTools\Modules::disable($module_list);
   $messages[] = $message;
   
  $module_list = array(
    'devel_generate',
    'strongarm',
    'fe_block',
    'realistic_dummy_content',   
    'uuid_features',
    'menu_import', 
  );
  $message = HookUpdateDeployTools\Modules::enable($module_list);
  $messages[] = $message;
  
  //themes
  $theme_list = array(
    0 => 'adaptivetheme',
    1 => 'adaptivetheme_admin',
    'theme_default' => 'sky',
    //'zen'
  );
  theme_enable($theme_list);
  $message = sprintf("Theme enabled => %s", implode(', ', $theme_list));
  $messages[] = $message;
  HookUpdateDeployTools\Message::make($message);
  
	//Set default theme
  foreach ($theme_list as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
      $message = sprintf("Variable set %s => %s", $var, $theme);
      $messages[] = $message;
      HookUpdateDeployTools\Message::make($message);
    }
  }

  // Disable the default Bartik theme
  theme_disable(array('bartik'));
  $message = "Default front bartik theme is disabled";
  HookUpdateDeployTools\Message::make($message);
  $messages[] = $message;
  
  //activate features mensu and import related custom menus
  $message = HookUpdateDeployTools\Modules::enable(array('fa_menus'));
  $messages[] = $message;
  HookUpdateDeployTools\Message::make($message);
  $messages += import_custom_menus();
  
  //features
  $module_list = array(
    'fa_blocks_content',
    'fa_content_types',
    'fa_contents',
    'fa_theme_sky',
  );
  $message = HookUpdateDeployTools\Modules::enable($module_list);
  $messages[] = $message;
  HookUpdateDeployTools\Message::make($message);
  
  //generate contents
  module_load_include('inc', 'devel_generate', 'devel_generate');
  module_load_include('inc', 'devel_generate');
   $generate = array();
	$generate['values'] = array(
	 'node_types' => array('article' => article),
  'kill_content' => 1,
	  'num_nodes' => 30,
	  'max_comments' => 0,
	);

   devel_generate_content($generate);
  
  //copy some resources
  $message = site_deploy_copy_resources();
  $messages[] = $message;
  HookUpdateDeployTools\Message::make($message);

  return $messages;
}

//copy some resources
function site_deploy_copy_resources()
{
	//theme css generated from theme settings saving
	$base_theme='adaptivetheme';
	$src=site_deploy_joinpaths(variable_get('file_public_path', site_deploy_joinpaths(conf_path(), 'files')), '..', 'others', 'theme_files_generated', $base_theme);
	$dst=site_deploy_joinpaths(variable_get('file_public_path', site_deploy_joinpaths(conf_path(), 'files')), $base_theme);
	site_deploy_recursive_copy($src,$dst);
	
	return sprintf("Resources copy from [%s] to [%s]", $src, $dst);
}

function site_deploy_trimds($s) {
    return rtrim($s,DIRECTORY_SEPARATOR);
}

function site_deploy_joinpaths() {
    return implode(DIRECTORY_SEPARATOR, array_map('site_deploy_trimds', func_get_args()));
}

//copy recursivly a folder into another
function site_deploy_recursive_copy($src,$dst) { 
    $dir = opendir($src); 
    @mkdir($dst); 
    while(false !== ( $file = readdir($dir)) ) { 
        if (( $file != '.' ) && ( $file != '..' )) { 
            if ( is_dir(site_deploy_joinpaths($src, $file)) ) { 
                site_deploy_recursive_copy(site_deploy_joinpaths($src, $file) ,site_deploy_joinpaths($dst, $file)); 
            } 
            else { 
                copy(site_deploy_joinpaths($src, $file), site_deploy_joinpaths($dst, $file)); 
            } 
        } 
    } 
    closedir($dir); 
}

/**Import custom menus
*/
function import_custom_menus(){
  $messages = array();
  $message = HookUpdateDeployTools\Settings::set('hook_update_deploy_tools_menu_feature', 'fa_menus');
  $messages[] = $message;
  HookUpdateDeployTools\Message::make($message);
  
  $message = HookUpdateDeployTools\Menus::import('menu-a-propos');
  $messages[] = $message;
  HookUpdateDeployTools\Message::make($message);
  
  $message = HookUpdateDeployTools\Menus::import('menu-langue');
  $messages[] = $message;
  HookUpdateDeployTools\Message::make($message);
  
  return $messages;
} 